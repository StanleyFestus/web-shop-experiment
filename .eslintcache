[{"/home/kelewe/Projects/web-store-demo-app/src/App.js":"1","/home/kelewe/Projects/web-store-demo-app/src/index.js":"2","/home/kelewe/Projects/web-store-demo-app/src/reportWebVitals.js":"3","/home/kelewe/Projects/web-store-demo-app/src/components/NavBar/index.js":"4","/home/kelewe/Projects/web-store-demo-app/src/components/NavBar/NavBar.js":"5","/home/kelewe/Projects/web-store-demo-app/src/utils/constants.js":"6","/home/kelewe/Projects/web-store-demo-app/src/components/index.js":"7","/home/kelewe/Projects/web-store-demo-app/src/components/CartButton/index.js":"8","/home/kelewe/Projects/web-store-demo-app/src/components/CartButton/CartButton.js":"9","/home/kelewe/Projects/web-store-demo-app/src/context/user_context.js":"10","/home/kelewe/Projects/web-store-demo-app/src/context/cart_context.js":"11","/home/kelewe/Projects/web-store-demo-app/src/reducers/cart_reducer.js":"12"},{"size":293,"mtime":1610351626874,"results":"13","hashOfConfig":"14"},{"size":500,"mtime":1610343970634,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1610278806938,"results":"16","hashOfConfig":"14"},{"size":1264,"mtime":1610542676559,"results":"17","hashOfConfig":"14"},{"size":1558,"mtime":1610622843517,"results":"18","hashOfConfig":"14"},{"size":1172,"mtime":1610358528387,"results":"19","hashOfConfig":"14"},{"size":0,"mtime":1610344279877,"results":"20","hashOfConfig":"14"},{"size":1291,"mtime":1610613392449,"results":"21","hashOfConfig":"14"},{"size":1094,"mtime":1610522803103,"results":"22","hashOfConfig":"14"},{"size":801,"mtime":1610442352141,"results":"23","hashOfConfig":"14"},{"size":1250,"mtime":1610440894490,"results":"24","hashOfConfig":"14"},{"size":2463,"mtime":1610441026719,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mni2hl",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},"/home/kelewe/Projects/web-store-demo-app/src/App.js",[],"/home/kelewe/Projects/web-store-demo-app/src/index.js",[],"/home/kelewe/Projects/web-store-demo-app/src/reportWebVitals.js",[],"/home/kelewe/Projects/web-store-demo-app/src/components/NavBar/index.js",["51","52"],"/home/kelewe/Projects/web-store-demo-app/src/components/NavBar/NavBar.js",[],"/home/kelewe/Projects/web-store-demo-app/src/utils/constants.js",["53"],"/home/kelewe/Projects/web-store-demo-app/src/components/index.js",[],"/home/kelewe/Projects/web-store-demo-app/src/components/CartButton/index.js",["54","55","56"],"/home/kelewe/Projects/web-store-demo-app/src/components/CartButton/CartButton.js",[],"/home/kelewe/Projects/web-store-demo-app/src/context/user_context.js",[],"/home/kelewe/Projects/web-store-demo-app/src/context/cart_context.js",["57"],"/home/kelewe/Projects/web-store-demo-app/src/reducers/cart_reducer.js",["58"],"import { \n  ADD_TO_CART,\n  CLEAR_CART,\n  REMOVE_CART_ITEM,\n  TOGGLE_CART_ITEM_AMOUNT,\n  COUNT_CART_TOTAL\n } from \"../actions\";\n\n const cart_reducer = (state, action) => {\n   if(action.type = ADD_TO_CART) {\n     const {id, color, amount, product} = action.payload;\n     const item = state.cart.find((i) => i.id === id + color)\n     if(item){\n       const itemCart = state.cart.map((cartsItem) => {\n         if(cartsItem.id === id + color){\n           let newAmount = cartsItem.amount + amount\n           if(newAmount > cartsItem.max){\n             newAmount = cartsItem.max\n           }\n           return {\n             ...cartsItem, amount: newAmount\n           }\n         } else {\n           return cartsItem\n         }\n       })\n       return {...state, cart: itemCart}\n     }\n     else {\n       const newItem = {\n         id: id + color,\n         name: product.name,\n         color,\n         amount,\n         image: product.images[0].url,\n         price: product.price,\n         max: product.stock,\n       }\n       return {...state, cart: [...state.cart, newItem]}\n     }\n   }\n   if (action.type === REMOVE_CART_ITEM) {\n    const tempCart = state.cart.filter((item) => item.id !== action.payload)\n    return { ...state, cart: tempCart }\n  }\n  if (action.type === TOGGLE_CART_ITEM_AMOUNT) {\n    const { id, value } = action.payload\n    const tempCart = state.cart.map((item) => {\n      if (item.id === id) {\n        if (value === 'inc') {\n          let newAmount = item.amount + 1\n          if (newAmount > item.max) {\n            newAmount = item.max\n          }\n          return { ...item, amount: newAmount }\n        }\n        if (value === 'dec') {\n          let newAmount = item.amount - 1\n          if (newAmount < 1) {\n            newAmount = 1\n          }\n          return { ...item, amount: newAmount }\n        }\n      }\n      return item\n    })\n    return { ...state, cart: tempCart }\n  }\n  if (action.type === CLEAR_CART) {\n    return { ...state, cart: [] }\n  }\n  if (action.type === COUNT_CART_TOTAL) {\n    const { total_items, total_amount } = state.cart.reduce(\n      (total, cartItem) => {\n        const { amount, price } = cartItem\n        total.total_items += amount\n        total.total_amount += price * amount\n        return total\n      },\n      { total_items: 0, total_amount: 0 }\n    )\n    return { ...state, total_items, total_amount }\n  }\n  throw new Error(`No Matching \"${action.type}\" - action type`)\n\n }\n\n export default cart_reducer;\n",{"ruleId":"59","severity":1,"message":"60","line":4,"column":10,"nodeType":"61","messageId":"62","endLine":4,"endColumn":16},{"ruleId":"59","severity":1,"message":"63","line":7,"column":10,"nodeType":"61","messageId":"62","endLine":7,"endColumn":24},{"ruleId":"59","severity":1,"message":"64","line":2,"column":10,"nodeType":"61","messageId":"62","endLine":2,"endColumn":16},{"ruleId":"59","severity":1,"message":"65","line":4,"column":10,"nodeType":"61","messageId":"62","endLine":4,"endColumn":15},{"ruleId":"59","severity":1,"message":"63","line":5,"column":10,"nodeType":"61","messageId":"62","endLine":5,"endColumn":24},{"ruleId":"59","severity":1,"message":"66","line":6,"column":10,"nodeType":"61","messageId":"62","endLine":6,"endColumn":24},{"ruleId":"59","severity":1,"message":"67","line":1,"column":29,"nodeType":"61","messageId":"62","endLine":1,"endColumn":38},{"ruleId":"68","severity":1,"message":"69","line":10,"column":7,"nodeType":"70","messageId":"71","endLine":10,"endColumn":32},"no-unused-vars","'FaBars' is defined but never used.","Identifier","unusedVar","'useUserContext' is defined but never used.","'FaHome' is defined but never used.","'Links' is defined but never used.","'useCartContext' is defined but never used.","'useEffect' is defined but never used.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing"]